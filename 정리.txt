스프링 시큐리티 정리

## 스프링 웹 프로젝트 만들기
기본 admin, dashboard, index, info API 컨트롤러 추가 및 템플릿추가

SampleController
public String index(Model model, Principal principal){ //모델을 입력 하여 템플릿에 Attribute값 주입 Principal을 통해 로그인 사용자 정보 받기
    if(principal==null){
        model.addAttribute("message", "Hello Spring Security");
    }else{
        model.addAttribute("message", "Hello "+principal.getName());
    }
    return "index";
}
-------------------------------------------------------------------------------------
## 스프링 시큐리티 연동
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>

의존성을 추가하여 시큐리티 연동
시큐리티 추가 시 자동 설정으로 인해 모든 웹 페이지 접근 시 로그인 폼으로 이동
-------------------------------------------------------------------------------------
## 스프링 시큐리티 설정하기

SpringSecurityConfig 추가
WebSecurityConfigurerAdapter 를 상속 받아 오버 라이드를 통해 worngus

http.authorizeRequests()  //접근 설정
        .mvcMatchers("/", "/info").permitAll() //모두 허용
        .mvcMatchers("/admin").hasRole("ADMIN") //자격 요건
        .anyRequest().authenticated(); //로그인 사용자는 가능
http.formLogin();
http.httpBasic();
-------------------------------------------------------------------------------------
## 스프링 시큐리티 커스터마이징 :인메모리유저 추가

class SecurityConfig
 @Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception { // 사용자 추가 기능 메소드
    auth.inMemoryAuthentication()
            .withUser("joon").password("{noop}123").roles("USER")// {noop} Spring 5부터 사용가능 한 기본 비밀번호 인코더(암호화 x)
            .and()
            .withUser("admin").password("{noop}!@#").roles("ADMIN");//암호화 해서 전송

}
-------------------------------------------------------------------------------------
## 스프링 시큐리티 커스터마이징: JPA 연동
AcountRepository 생성
AccountService 생성
AccountService 클래스에 UserDetailsService를 위임
loadUserByUsername 메소드 구현

password를 {인코더타입}비밀번호로 만들어 주지 않으면 생성되지 않음
임의로 수동으로 {noop}password로 변형
-------------------------------------------------------------------------------------

## 스프링 시큐리티 커스터마이징: PasswordEncoder
기존 수동으로 추가해주던 {noop}password 코드를
스프링시큐리티에서 제공해주는 PassEncoder로 사용

SpringSecurity doc
https://docs.spring.io/spring-security/site/docs/5.4.2/reference/html5/#authentication-password-storage-dpe

 @Bean
    public PasswordEncoder passwordEncoder(){ //{noop}로 만들어줌
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }
-------------------------------------------------------------------------------------
