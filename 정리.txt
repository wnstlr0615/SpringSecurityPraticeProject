스프링 시큐리티 정리

## 스프링 웹 프로젝트 만들기
기본 admin, dashboard, index, info API 컨트롤러 추가 및 템플릿추가

SampleController
public String index(Model model, Principal principal){ //모델을 입력 하여 템플릿에 Attribute값 주입 Principal을 통해 로그인 사용자 정보 받기
    if(principal==null){
        model.addAttribute("message", "Hello Spring Security");
    }else{
        model.addAttribute("message", "Hello "+principal.getName());
    }
    return "index";
}
-------------------------------------------------------------------------------------
## 스프링 시큐리티 연동
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>

의존성을 추가하여 시큐리티 연동
시큐리티 추가 시 자동 설정으로 인해 모든 웹 페이지 접근 시 로그인 폼으로 이동
-------------------------------------------------------------------------------------
## 스프링 시큐리티 설정하기

SpringSecurityConfig 추가
WebSecurityConfigurerAdapter 를 상속 받아 오버 라이드를 통해 worngus

http.authorizeRequests()  //접근 설정
        .mvcMatchers("/", "/info").permitAll() //모두 허용
        .mvcMatchers("/admin").hasRole("ADMIN") //자격 요건
        .anyRequest().authenticated(); //로그인 사용자는 가능
http.formLogin();
http.httpBasic();
-------------------------------------------------------------------------------------
## 스프링 시큐리티 커스터마이징 :인메모리유저 추가

class SecurityConfig
 @Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception { // 사용자 추가 기능 메소드
    auth.inMemoryAuthentication()
            .withUser("joon").password("{noop}123").roles("USER")// {noop} Spring 5부터 사용가능 한 기본 비밀번호 인코더(암호화 x)
            .and()
            .withUser("admin").password("{noop}!@#").roles("ADMIN");//암호화 해서 전송

}
-------------------------------------------------------------------------------------
## 스프링 시큐리티 커스터마이징: JPA 연동
AcountRepository 생성
AccountService 생성
AccountService 클래스에 UserDetailsService를 위임
loadUserByUsername 메소드 구현

password를 {인코더타입}비밀번호로 만들어 주지 않으면 생성되지 않음
임의로 수동으로 {noop}password로 변형
-------------------------------------------------------------------------------------

## 스프링 시큐리티 커스터마이징: PasswordEncoder
기존 수동으로 추가해주던 {noop}password 코드를
스프링시큐리티에서 제공해주는 PassEncoder로 사용

SpringSecurity doc
https://docs.spring.io/spring-security/site/docs/5.4.2/reference/html5/#authentication-password-storage-dpe

 @Bean
    public PasswordEncoder passwordEncoder(){ //{noop}로 만들어줌
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }
-------------------------------------------------------------------------------------
## 스프링 시큐리티 테스트 1부

isForbidden() 403 에러 권한 없음

사용자 접근 확인 방법 #1(with 메소드 사용)
 @Test
public void admin_user() throws Exception {
    mvc.perform(get("/admin").with(user("joon").roles("USER")))//User가 로그인했다고 가정
            .andDo(print())
            .andExpect(status().isForbidden());
}

사용자 접근 확인 방법 #2(@WithMockUser 사용 )
@Test
@WithMockUser(username = "joon",roles = {"ADMIN"})
public void admin_admin() throws Exception {
    mvc.perform(get("/admin"))//User가 로그인했다고 가정
            .andDo(print())
            .andExpect(status().isOk());
}

@WithAnonymousUser //익명 접근

자주쓰는 조건 어노테이션화 하기
@WithUser

구현부
@Retention(RetentionPolicy.RUNTIME)
@WithMockUser(username = "joon",roles = {"USER"})
public @interface WithUser {
}
-------------------------------------------------------------------------------------
## 스프링 시큐리티 테스트 2부
로그인 폼을 사용하여 로그인 여부 테스트
성공 테스트{
 mvc.perform(formLogin().user(account.getUsername()).password(password))
                .andExpect(authenticated());//로그인 성공 여부
}
실패테스트{
 mvc.perform(formLogin().user(account.getUsername()).password("12345"))
                .andExpect(unauthenticated());
}

성공 확인 테스트에 경우 authenticated() 를 사용하고 실패의 경우 unauthenticated()를 사용한다.
import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.authenticated;
import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.unauthenticated;


@Transactional
다른 테스트들과 중복으로 사용되는 메소드들을 롤백 해준다.
-------------------------------------------------------------------------------------
## 스프링시큐리티 아키텍처
## 10.	SecurityContextHolder와 Authentication
SpringSecurityContextHolder 구조

SpringSecurityContextHolder
   SpringSecurityContext
       Authentication    //Principal 과 GrantAuthorify(권한 정보) 제공
          Principal    //사용자 정보

Authentication
-	Principal과 GrantAuthority 제공.

Principal
-	“누구"에 해당하는 정보.
-	UserDetailsService에서 리턴한 그 객체.
-	객체는 UserDetails 타입.
GrantAuthority:
-	“ROLE_USER”, “ROLE_ADMIN”등 Principal이 가지고 있는 “권한”을 나타낸다.
-	인증 이후, 인가 및 권한 확인할 때 이 정보를 참조한다.

UserDetails
-	애플리케이션이 가지고 있는 유저 정보와 스프링 시큐리티가 사용하는 Authentication 객체 사이의 어댑터.
UserDetailsService
-	유저 정보를 UserDetails 타입으로 가져오는 DAO (Data Access Object) 인터페이스.

Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
Object principal = authentication.getPrincipal();
Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();//권한 정보
Object credentials = authentication.getCredentials();
boolean authenticated = authentication.isAuthenticated();//인증된 사용자인지 확인

-------------------------------------------------------------------------------------
## 11.	AuthenticationManager와 Authentication
AuthenticationManager 가 Authentication 를 관리하고 인증을 통해 반환해준다.
AuthenticationManager 에 등록된 여러 인증 수단을 통해 사용자 인증을 한 후
Authentication을 반환한다.

-------------------------------------------------------------------------------------
## 12.	ThreadLocal
같은 쓰레드 안에서 변수를 공유함
public class AccountContext {
    private static final ThreadLocal<Account> ACCOUNT_THREAD_LOCAL
            = new ThreadLocal<>();
    public static void setAccount(Account account) {
        ACCOUNT_THREAD_LOCAL.set(account);
    }
    public static Account getAccount() {
        return ACCOUNT_THREAD_LOCAL.get();
    }
}
13.	Authencation과 SecurityContextHodler
AuthenticationManager가 인증을 마친 뒤 리턴 받은 Authentication 객체의 행방은?

UsernamePasswordAuthenticationFilter
●	폼 인증을 처리하는 시큐리티 필터
●	인증된 Authentication 객체를 SecurityContextHolder에 넣어주는 필터
●	SecurityContextHolder.getContext().setAuthentication(authentication)

SecurityContextPersisenceFilter
●	SecurityContext를 HTTP session에 캐시(기본 전략)하여 여러 요청에서 Authentication을 공유할 수 있 공유하는 필터.
●	SecurityContextRepository를 교체하여 세션을 HTTP session이 아닌 다른 곳에 저장하는 것도 가능하다.
-------------------------------------------------------------------------------------
## 14.	스프링 시큐리티 Filter와 FilterChainProxy
스프링 시큐리티가 제공하는 필터들
1.	WebAsyncManagerIntergrationFilter
2.	SecurityContextPersistenceFilter
3.	HeaderWriterFilter
4.	CsrfFilter
5.	LogoutFilter
6.	UsernamePasswordAuthenticationFilter
7.	DefaultLoginPageGeneratingFilter
8.	DefaultLogoutPageGeneratingFilter
9.	BasicAuthenticationFilter
10.	RequestCacheAwareFtiler
11.	SecurityContextHolderAwareReqeustFilter
12.	AnonymouseAuthenticationFilter
13.	SessionManagementFilter
14.	ExeptionTranslationFilter
15.	FilterSecurityInterceptor

이 모든 필터는 FilterChainProxy가 호출한다.

-------------------------------------------------------------------------------------

## 15.	DelegatingFilterProxy와 FilterChainProxy

DelegatingFilterProxy
●	일반적인 서블릿 필터.
●	서블릿 필터 처리를 스프링에 들어있는 빈으로 위임하고 싶을 때 사용하는 서블릿 필터.
●	타겟 빈 이름을 설정한다.
●	스프링 부트 없이 스프링 시큐리티 설정할 때는 AbstractSecurityWebApplicationInitializer를 사용해서 등록.
●	스프링 부트를 사용할 때는 자동으로 등록 된다. (SecurityFilterAutoConfiguration)

FilterChainProxy
●	보통 “springSecurityFilterChain” 이라는 이름의 빈으로 등록된다.

-------------------------------------------------------------------------------------
16.	AccessDecisionManager 1부
 인가를 전담하는 클래스
 여러개의 모터를 가지 포함하여 사용된다.

 Access Control 결정을 내리는 인터페이스로, 구현체 3가지를 기본으로 제공한다.
 ●	AffirmativeBased: 여러 Voter중에 한명이라도 허용하면 허용. 기본 전략.
 ●	ConsensusBased: 다수결
 ●	UnanimousBased: 만장일치

 AccessDecisionVoter
 ●	해당 Authentication이 특정한 Object에 접근할 때 필요한 ConfigAttributes를 만족하는지 확인한다.
 ●	WebExpressionVoter: 웹 시큐리티에서 사용하는 기본 구현체, ROLE_Xxxx가 매치하는지 확인.
 ●	RoleHierarchyVoter: 계층형 ROLE 지원. ADMIN > MANAGER > USER

 -------------------------------------------------------------------------------------
17.	AccessDecisionManager 2부

권한 서열 적용 ROLE_ADMIN > ROLU_USER admin 권한은 User보다 권한이 높으므로 USER만 접근가능한 url에 접근가능해야한다.
방법1 ROLE을 직접 여러개 넣어준다.
방법2 RoleHieracrchyImpl 설정

public SecurityExpressionHandler expressionHandler(){ // // 권한 세부 설정
   RoleHierarchyImpl roleHierarchy=new RoleHierarchyImpl();
   roleHierarchy.setHierarchy("ROLE_ADMIN > ROLE_USER");
   DefaultWebSecurityExpressionHandler handler=new DefaultWebSecurityExpressionHandler();
   handler.setRoleHierarchy(roleHierarchy);
    return handler;
}
protected void configure(HttpSecurity http) throws Exception {
                                .
                                .
                .mvcMatchers("/user").hasRole("USER") //자격 요건
                .anyRequest().authenticated()//로그인 사용자는 가능
               // .accessDecisionManager(accessDecisionManager()) <- AccessDecisionManger로 설정 하는 방법
                .expressionHandler(expressionHandler()) <- AccessDecisionManger 안에 있는 expressionHandler 로 접근 방법
                                .
}
-------------------------------------------------------------------------------------
## 21.	스프링 시큐리티 ignoring() 1부

웹 브라우저가 자동으로
localhost:8080/favicon.ico 요청 시 설정에 따라 로그인 요청을 보내게 됨
  @Override
    public void configure(WebSecurity web) throws Exception {
        //web.ignoring().mvcMatchers("/favicon.ico");
        web.ignoring().requestMatchers(PathRequest.toStaticResources().atCommonLocations());// favicon.ico 등 리소스 허용
    }
    다음과 같이 리소스 요청을 모두 권한없이 접근 할 수 있도록 해준다

-------------------------------------------------------------------------------------
## 22.	스프링 시큐리티 ignoring() 2부
다음과 같이 HttpSecurity 에서도 요청을 허용 할 수 있지만 여러 필터를 사용하면서 자원을 낭비하기 때문에
WebSecurity에서 해주는 것이 좋다.
  @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()  //접근 설정
                .mvcMatchers("/", "/info", "/account/**").permitAll() //모두 허용
                .mvcMatchers("/admin").hasRole("ADMIN") //자격 요건
                .mvcMatchers("/user").hasRole("USER") //자격 요건
                //.requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll() 결과는 같지만 요청시간 이 오래 걸림
                .anyRequest().authenticated()//로그인 사용자는 가능
                .expressionHandler(expressionHandler())
            // .accessDecisionManager(accessDecisionManager())
        ;
        http.formLogin();
        http.httpBasic();
}

-------------------------------------------------------------------------------------
## 23.	Async 웹 MVC를 지원하는 필터:

WebAsyncManagerIntegrationFilter 필터는  스프링 MVC의 Async 기능(핸들러에서 Callable을 리턴할 수 있는 기능)을
사용할 때에도 SecurityContext를 공유하도록 도와주는 필터.
-------------------------------------------------------------------------------------
## 24.	스프링 시큐리티와 @Async
@Async를 사용 하여 서비스를 호출하는 경우 쓰레드가 달라서 SecurityContext를 공유받지 못하는데
configure(HttpSecurity http)에
 SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);//ThreadLocal 하위 범위까지 공유하도록 설정
 다음과 같이 등록하면 사용 가능
 강의 참조
-------------------------------------------------------------------------------------
## 25.	SecurityContext 영속화 필터: SecurityContextPersistenceFilter

SecurityContextRepository를 사용해서 기존의 SecurityContext를 읽어오거나 초기화 한다.
●	기본으로 사용하는 전략은 HTTP Session을 사용한다.
●	Spring-Session과 연동하여 세션 클러스터를 구현할 수 있다. (이 강좌에서는 다루지 않습니다.)

SecurityContext가 등록되었는지 확인하고 사용자가 없으면 SecurityContext를 초기화한다.
-------------------------------------------------------------------------------------
## 26.	시큐리티 관련 헤더 추가하는 필터: HeaderWriterFilter

응답 헤더에 시큐리티 관련 헤더를 추가해주는 필터
●	XContentTypeOptionsHeaderWriter: 마임 타입 스니핑 방어.
●	XXssProtectionHeaderWriter: 브라우저에 내장된 XSS 필터 적용.
●	CacheControlHeadersWriter: 캐시 히스토리 취약점 방어.
●	HstsHeaderWriter: HTTPS로만 소통하도록 강제.
●	XFrameOptionsHeaderWriter: clickjacking 방어.

사용자가 커스텀으로 등록할일이 거의 없음
-------------------------------------------------------------------------------------
## 27.	CSRF 어택 방지 필터: CsrfFilter
   CSRF 어택 방지 필터
   ●	인증된 유저의 계정을 사용해 악의적인 변경 요청을 만들어 보내는 기법.
크래커에 의해 외부 링크로 연결된 후 특정사이트에 외부에서 요청을 임의로 보내는 경우 해당 웹에서
 전송한 것 인지를 확인하기 위해 CSRF 토큰을 넣어서 보낸다.
 -------------------------------------------------------------------------------------
## 28.	CSRF 토큰 사용 예제
signup Api를 만들어서 csrf 토큰 사용 방법

@PostMapping
public String processSignUp(@ModelAttribute Account account){ // 회원 가입 요청시
    account.setRole("USER");
    accountService.createUser(account);
    return "redirect:/"; //홈으로 이동
}


@Test
public void signUpForm() throws Exception {
    mvc.perform(get("/signup"))
            .andExpect(status().isOk())
            .andExpect(content().string(containsString("_csrf"))) // html에 포함된 _csrf문구확인
    ;
}

@Test
public void processSignUp() throws Exception {
    mvc.perform(post("/signup")
            .param("username", "joon")  //파라미터 입력
            .param("password", "123")
            .with(csrf()) //csrf 토큰을 넣는 방법
    )
            .andDo(print())
            .andExpect(status().is3xxRedirection());//리다이렉션 확인
}
-------------------------------------------------------------------------------------
## 29.	로그아웃 처리 필터: LogoutFilter
여러 LogoutHandler를 사용하여 로그아웃시 필요한 처리를 하며 이후에는 LogoutSuccessHandler를 사용하여 로그아웃 후 처리를 한다.

http.logout()
        .logoutUrl("/logout")
        .logoutSuccessUrl("/")
        .logoutRequestMatcher()
        .invalidateHttpSession(true)
        .deleteCookies()
        .addLogoutHandler()
        .logoutSuccessHandler();

LogoutHandler
●	CsrfLogoutHandler
●	SecurityContextLogoutHandler

LogoutSuccessHandler
●	SimpleUrlLogoutSuccessHandler
-------------------------------------------------------------------------------------
## 30.	폼 인증 처리 필터: UsernamePasswordAuthenticationFilter

폼 로그인을 처리하는 인증 필터
●	사용자가 폼에 입력한 username과 password로 Authentcation을 만들고 AuthenticationManager를 사용하여 인증을 시도한다.
●	AuthenticationManager (ProviderManager)는 여러 AuthenticationProvider를 사용하여 인증을 시도하는데, 그 중에 DaoAuthenticationProvider는 UserDetailsServivce를 사용하여 UserDetails 정보를 가져와 사용자가 입력한 password와 비교한다.
-------------------------------------------------------------------------------------
## 31.	DefaultLoginPageGeneratingFilter
기본 로그인 폼 페이지를 생성해주는 필터
●	GET /login 요청을 처리하는 필터.

http.formLogin()
    .usernameParameter("my-username")
    .passwordParameter("my-password");
    -------------------------------------------------------------------------------------
## 32.	로그인/로그아웃 폼 커스터마이징
Login, Logout API 생성
http.formLogin()
            .loginPage("/login")
            .permitAll();
<h1>Logout</h1>
<form action="/logout" th:action="@{/logout}" method="post">
    <p><input type="submit" value="Logout" /></p>
</form>
<form action="/login" th:action="@{/login}" method="post">
    <p>Username: <input type="text" name="username" /></p>
    <p>Password: <input type="password" name="password" /></p>
    <p><input type="submit" value="SignIn" /></p>
</form>
-------------------------------------------------------------------------------------
## 34.	요청 캐시 필터: RequestCacheAwareFilter
현재 요청과 관련 있는 캐시된 요청이 있는지 찾아서 적용하는 필터.
●	캐시된 요청이 없다면, 현재 요청 처리
●	캐시된 요청이 있다면, 해당 캐시된 요청 처리
-------------------------------------------------------------------------------------
## 35.	시큐리티 관련 서블릿 스팩 구현 필터: SecurityContextHolderAwareRequestFilter
시큐리티 관련 서블릿 API를 구현해주는 필터
●	HttpServletRequest#authenticate(HttpServletResponse)
●	HttpServletRequest#login(String, String)
●	HttpServletRequest#logout()
●	AsyncContext#start(Runnable)
-------------------------------------------------------------------------------------
## 36.	익명 인증 필터: AnonymousAuthenticationFilter
https://docs.spring.io/spring-security/site/docs/5.1.5.RELEASE/reference/htmlsingle/#anonymous

현재 SecurityContext에 Authentication이 null이면 “익명 Authentication”을 만들어 넣어주고, null이 아니면 아무일도 하지 않는다.

기본으로 만들어 사용할 “익명 Authentication” 객체를 설정할 수 있다.
로그인되지 않은 사용자면 Authentication을 Anonymous를 넣어 준다.

-------------------------------------------------------------------------------------
## 37.	세션 관리 필터: SessionManagementFilter

세션 커스터 마이징
       http.sessionManagement()
                .sessionFixation()
                    .changeSessionId()
                        .invalidSessionUrl("login") //세션 변경시 보내질 url
                    .maximumSessions(1) // 한 계졍으로 접근 가능한 개수
                        .maxSessionsPreventsLogin(true) //true 시 추가 로그인 허용 x
                        .expiredUrl("/")  //외부에서 로그인 시도시 기존 앱에서 보내질 url
                .and()
                    .sessionCreationPolicy()//세션 생선 전략
                    ;

유효하지 않은 세션을 리다이렉트 시킬 URL 설정
●	invalidSessionUrl

동시성 제어: maximumSessions
●	추가 로그인을 막을지 여부 설정 (기본값, false)
●	https://docs.spring.io/spring-security/site/docs/5.1.5.RELEASE/reference/htmlsingle/#nsa-concurrency-control

세션 생성 전략: sessionCreationPolicy
●	IF_REQUIRED (기본값) : 필요하면 만든다.
●	NEVER :이미 세션이 있으면 쓰지 않는다
●	STATELESS  :세션 사용 x
●	ALWAYS :


-------------------------------------------------------------------------------------
## 38.	인증/인가 예외 처리 필터: ExceptionTranslationFilter

ExceptionTranslatorFilter 에서 예외를 검증해서 FilterSecurityInterceptor에게 전달해줌

ExceptionTranslatorFilter 에서 발생하는 예외

AuthenticationException :  (로그인 여부)
→ AuthenticationEntryPoint 로 전달
AccessDeniedException : (권한 여부)
→ AccessDeniedHandler(403Error)


http.exceptionHandling() //ExceptionTranslationFilter 커스터 마이징
//   .accessDeniedPage("/access-denied")  //페이지 전환
     .accessDeniedHandler(new AccessDeniedHandler() { // 좀더 세부 적으러 기록 및 전화
        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {
            UserDetails principal= (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
            String name=principal.getUsername();
            System.out.println(name+" is denied to access "+ request.getRequestURI());
            response.sendRedirect("/access-denied");
        }
    })
;
-------------------------------------------------------------------------------------
## 39.	인가 처리 필터: FilterSecurityInterceptor

http.authorizeRequests()
        .mvcMatchers("/", "/info", "/account/**", "/signup").permitAll()
        .mvcMatchers("/admin").hasAuthority("ROLE_ADMIN")  //ROLE_을 붙여 줘야 한다.
        .mvcMatchers("/user").hasRole("USER")
        .anyRequest().authenticated()
        .expressionHandler(expressionHandler());

-------------------------------------------------------------------------------------
## 40.	토큰 기반 인증 필터 : RememberMeAuthenticationFilter
세션이 사라지거나 만료가 되더라도 쿠키 또는 DB를 사용하여 저장된 토큰 기반으로 인증을 지원하는 필터

 http.rememberMe()
                .userDetailsService(accountService)
              //  .alwaysRemember(false)// true일 경우 모든 요청을 remember로 사용
              //  .tokenValiditySeconds()//쿠기 시간 설정
              //  .useSecureCookie(true )//https로만 접근 가능하도록 설정
                .key("remember-me-sample");

-------------------------------------------------------------------------------------
## 41.	커스텀 필터 추가하기
필터 추가하기
http.addFilterBefore(new LogginFilter(), WebAsyncManagerIntegrationFilter.class);

public class LogginFilter  extends GenericFilterBean { //커스텀 필터
    private Logger logger= LoggerFactory.getLogger(this.getClass());
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        StopWatch stopWatch=new StopWatch();
        stopWatch.start(((HttpServletRequest)servletRequest).getRequestURI());
        filterChain.doFilter(servletRequest, servletResponse); //안하면 안넘어감
        stopWatch.stop();
        logger.info(stopWatch.prettyPrint());
    }
}
-------------------------------------------------------------------------------------
## 42.	타임리프 스프링 시큐리티 확장팩
<dependency>
	<groupId>org.thymeleaf.extras</groupId>
	<artifactId>thymeleaf-extras-springsecurity5</artifactId>
</dependency>

다음 의존성을 추가하면
<h1 th:text="${message}">Hello</h1>
<div th:if="${#authorization.expr('isAuthenticated()')}">
    <h2 th:text="${#authentication.name}">Name</h2>
    <a href="/logout" th:href="@{/logout}">로그아웃</a>
</div>
<div th:unless="${#authorization.expr('isAuthenticated()')}">
    <a href="/login" th:href="@{/login}">로그인</a>
    다음과 같이 Authentication 과 Authorization 에 접근 가능
-------------------------------------------------------------------------------------
## 43.	sec 네임스페이스
기존 코드를 좀 더 안전하고 쉽게 작성할 수 있다.

Sec 네임스페이스 등록
xmlns:sec="http://www.thymeleaf.org/extras/spring-security"

Sec 네임스페이스 사용하기
<div sec:authorize="isAuthenticated()">
    <h2 sec:authentication="name">Name</h2>
    <a href="/logout" th:href="@{/logout}">Logout</a>
</div>
<div sec:authorize="!isAuthenticated()">
    <a href="/login" th:href="@{/login}">Login</a>
</div>
-------------------------------------------------------------------------------------
44.	메소드 시큐리티
데스크탑 환경에 프로그램에서 로그인 테스트시 메소드 시큐리티를 사용한다.

@Configuration
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true, jsr250Enabled = true)//조건을 설정해주어야함
public class MethodSecurity extends GlobalMethodSecurityConfiguration {
    @Override
    protected AccessDecisionManager accessDecisionManager() {//권한 서열 관계 추가
        RoleHierarchyImpl roleHierarchy=new RoleHierarchyImpl();
        roleHierarchy.setHierarchy("ROLE_ADMIN > ROLE_USER");
        AffirmativeBased accessDecisionManager=(AffirmativeBased) super.accessDecisionManager();
        accessDecisionManager.getDecisionVoters().add(new RoleHierarchyVoter(roleHierarchy));
        return accessDecisionManager;
    }

}
▲ 다음과 같이 선언 해준다.
 @Secured("ROLE_USER") //=@RolesAllowed("ROLE_USER"),  @PreAuthorize("hasRole('USER'") 메소드 호울 이전에 검사
   //RoleHierarchyImpl를 사용하지 않을 경우    @Secured({"ROLE_USER", "ROLE_ADMIN"}) 로 권한을 줄 수 있음
메소드에 다음과 같이 선언


수동으로 인증방법

@Test
    //@WithMockUser로 대체 가능
    public void dashboard_user(){
        Account account=Account.builder()
                        .username("joon")
                        .password("1234")
                        .role("USER")
                        .build();
        accountService.createUser(account); //계정 생성
        UserDetails userDetails = accountService.loadUserByUsername(account.getUsername()); //UserDetails로 변환
        UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(userDetails,"1234");//credentials는 패스워드
        Authentication authentication = authenticationManager.authenticate(token);
        SecurityContextHolder.getContext().setAuthentication(authentication);
        sampleService.dashboard();

▲위에서 AuthenticationManager을 사용하기위해서 SecurityConfig에 AuthenticationManager을 빈으로 등록해야한다

@Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }
-------------------------------------------------------------------------------------
45.	@AuthenticationPrincipal

사용자에 정보를 Principal 말고 다른 유형 으로 받는 방법
 //  public String index(Model model, Principal principal){ 변경 전
  // public String index(Model model, @AuthenticationPrincipal UserAccount userAccount){
    public String index(Model model,@CurrentUser Account userAccount){

    }

public class UserAccount extends User {
    private Account account;
    public UserAccount(Account account){
        super(account.getUsername(), account.getPassword(), List.of(new SimpleGrantedAuthority("ROLE_"+account.getRole())));
        this.account=account;
    }
    public Account getAccount() {
        return account;
    }
}
다음 과 같이 User 클래스를 상속 받아서 사용
-------------------------------------------------------------------------------------

